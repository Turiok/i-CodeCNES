# Description
# ===========
# This workflow is triggered each time a milestone is closed
# It builds the jar, generates release notes, pushes a new tag
# and makes a draft release with these elements.
---
name: Release

on:
  workflow_dispatch:
    inputs:
      draft:
        description: 'Est-ce que la release doit être en brouillon?'
        default: true
        required: false
        type: boolean
      prerelease:
        description: "Est-ce que c'est une pre-release?"
        default: true
        required: false
        type: boolean
      tag:
        description: "Spécifier le tag git?"
        required: true
        type: string
      maven_release_version:
        description: "Spécifier la version de release? Conseil: Utiliser la même version que le tag"
        required: true
        type: string
      maven_development_version:
        description: "Spécifier la nouvelle version de développement après la release? Ex : X.X.X-SNAPSHOT"
        required: true
        type: string


jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
    - name: Setup java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    - name: Maven install with new version
      run: |
        mvn -B versions:set-property -Dproperty=revision -DnewVersion="${{ inputs.maven_release_version }}"
        mvn -B -P prod install
    # the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
    # Triggering SonarQube analysis as results of it are required by Quality Gate check.
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4.2.1
      with:
        args: >
          -Dsonar.qualitygate.wait=true
          -Dsonar.qualitygate.timeout=600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Commit and tag project
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email catlab@cnes.fr
        git add pom.xml
        git commit -m "Release ${{ inputs.tag }}"
        git push
        git tag ${{ inputs.tag }} -m "Release ${{ inputs.tag }}"
        git push origin ${{ inputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Maven deploy
      run: |
        mvn -B -P prod deploy
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Bump up version in branch to next development version
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email catlab@cnes.frs
        mvn -B versions:set-property -Dproperty=revision -DnewVersion=${{ inputs.maven_development_version }}
        git add pom.xml
        git commit -m "Next development version is ${{ inputs.maven_development_version }}"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Set project values
      run: |
        echo "project=$(echo ${{ github.repository }} | awk -F '/' '{print $2}')" >> $GITHUB_ENV
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        artifacts: "icode-app/target/icode-*.zip"
        tag: ${{ inputs.tag }}
        name: ${{ env.project }} ${{ inputs.tag }}
        draft: ${{inputs.draft}}
        generateReleaseNotes: true
        prerelease: ${{inputs.prerelease}}
        token: ${{ secrets.GITHUB_TOKEN }}